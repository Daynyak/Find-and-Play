/* tslint:disable */
/* eslint-disable */
/**
 * Find and Play
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Event,
    EventFromJSON,
    EventToJSON,
    EventCertain,
    EventCertainFromJSON,
    EventCertainToJSON,
    Playground,
    PlaygroundFromJSON,
    PlaygroundToJSON,
    PlaygroundCertain,
    PlaygroundCertainFromJSON,
    PlaygroundCertainToJSON,
} from '../models';

export interface EventRequest {
    event: string;
}

export interface PlaygroundRequest {
    playground: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns description of sport event
     */
    async eventRaw(requestParameters: EventRequest): Promise<runtime.ApiResponse<Array<EventCertain>>> {
        if (requestParameters.event === null || requestParameters.event === undefined) {
            throw new runtime.RequiredError('event','Required parameter requestParameters.event was null or undefined when calling event.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event}`.replace(`{${"event"}}`, encodeURIComponent(String(requestParameters.event))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventCertainFromJSON));
    }

    /**
     * Returns description of sport event
     */
    async event(requestParameters: EventRequest): Promise<Array<EventCertain>> {
        const response = await this.eventRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of sport events
     */
    async eventsRaw(): Promise<runtime.ApiResponse<Array<Event>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Returns list of sport events
     */
    async events(): Promise<Array<Event>> {
        const response = await this.eventsRaw();
        return await response.value();
    }

    /**
     * Returns description of playground
     */
    async playgroundRaw(requestParameters: PlaygroundRequest): Promise<runtime.ApiResponse<Array<PlaygroundCertain>>> {
        if (requestParameters.playground === null || requestParameters.playground === undefined) {
            throw new runtime.RequiredError('playground','Required parameter requestParameters.playground was null or undefined when calling playground.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playgrounds/{playground}`.replace(`{${"playground"}}`, encodeURIComponent(String(requestParameters.playground))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaygroundCertainFromJSON));
    }

    /**
     * Returns description of playground
     */
    async playground(requestParameters: PlaygroundRequest): Promise<Array<PlaygroundCertain>> {
        const response = await this.playgroundRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of playgrounds
     */
    async playgroundsRaw(): Promise<runtime.ApiResponse<Array<Playground>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playgrounds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaygroundFromJSON));
    }

    /**
     * Returns list of playgrounds
     */
    async playgrounds(): Promise<Array<Playground>> {
        const response = await this.playgroundsRaw();
        return await response.value();
    }

}
